@using DotNetCoreBookstore.Dependencies
@inject IStringFormatter StringFormatter
<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>
</head>
<body>
    <div>
        @if (User.Identity.IsAuthenticated)
        {
            <span>Welcome @User.Identity.Name</span>
            <form method="post" asp-controller="Account" asp-action="Logout" asp-antiforgery="true">
                <input type="submit" value="Log out" />
            </form>
        }
        else
        {
            <a asp-controller="Account" asp-action="Register">Register</a>
            <a asp-controller="Account" asp-action="Login">Log in</a>
        }
    </div>
    <div>
        @RenderBody()
    </div>
    <div>
        @RenderSection("FunnyMessage", false)
    </div>
    <div>
        <p>@StringFormatter.FormatMe(new { Message = "Hello from the Layout view using dependency injection", Warning = "Use this technique sparingly"})</p>
    </div>
    <div>
        @await Component.InvokeAsync("FunnyMessage", new { objectToFormat = new { Message = "Invoking a view component from the layout...", TimeUtc = DateTime.UtcNow } })
    </div>
    <div>
        @await Component.InvokeAsync("FunnyMessageAsync", new { objectToFormat = new { Message = "Invoking an async view component from the layout...", TimeUtc = DateTime.UtcNow } })
    </div>
</body>
</html>
